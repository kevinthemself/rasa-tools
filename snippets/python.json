{
	"custom action": {
		"scope": "python",
		"prefix": [
			"rasa"
		],
		"body": [
			"from typing import Any, Text, Dict, List",
			"",
			"from rasa_sdk import Action, Tracker",
			"from rasa_sdk.executor import CollectingDispatcher",
			"",
			"",
			"$0"
		],
		"description": "Rasa imports for new actions file"
	},
	"custom action class": {
		"scope": "python",
		"prefix": [
			"custom action"
		],
		"body": [
			"class $1(Action):",
			"\t\"\"\"$3\"\"\"",
			"",
			"\tdef name(self) -> Text:",
			"\t\treturn \"$2\"",
			"",
			"\tdef run(",
			"\t\tself,",
			"\t\tdispatcher: CollectingDispatcher,",
			"\t\ttracker: Tracker,",
			"\t\tdomain: Dict[Text, Any]",
			"\t) -> List[Dict[Text, Any]]:",
			"",
			"\t\tdispatcher.utter_message($4)",
			"",
			"\t\treturn []",
			"$0"
		],
		"description": "Rasa action class"
	},
	"custom form class": {
		"scope": "python",
		"prefix": "form",
		"body": [
			"class $1(FormAction):",
			"",
			"\tdef name(self) -> Text:",
			"\t\treturn \"restaurant_form\"",
			"",
			"\t@staticmethod",
			"\tdef required_slots(tracker: Tracker) -> List[Text]:",
			"\t\t\"\"\"A list of required slots that the form has to fill\"\"\"",
			"",
			"\t\treturn [$2]",
			"",
			"\tdef slot_mappings(self) -> Dict[Text, Union[Dict, List[Dict]]]:",
			"\t\t\"\"\"A dictionary to map required slots to",
			"\t\t\t- an extracted entity (self.from_entity())",
			"\t\t\t- intent: value pairs (self.from_intent())",
			"\t\t\t- a whole message (self.from_text())",
			"\t\t\tor a list of them, where a first match will be picked\"\"\"",
			"",
			"\t\treturn {",
			"\t\t\t\"$3\": $4",
			"\t\t}",
			"",
			"\tdef submit(",
			"\t\tself,",
			"\t\tdispatcher: CollectingDispatcher,",
			"\t\ttracker: Tracker,",
			"\t\tdomain: Dict[Text, Any],",
			"\t) -> List[Dict]:",
			"\t\t\"\"\"Define what the form has to do",
			"\t\t\tafter all required slots are filled\"\"\"",
			"\t\t$5",
			"",
			"\t\treturn [$6]",
			"$0"
		],
		"description": "Rasa form class"
	},
	"custom mapping class": {
		"scope": "python",
		"prefix": [
			"custom mapping"
		],
		"body": [
			"class $1(Action):",
			"\t\"\"\"${3:dispatches messages mapped to this action}\"\"\"",
			"",
			"\tdef name(self) -> Text:",
			"\t\treturn \"$2",
			"",
			"\tdef run(",
			"\t\tself,",
			"\t\tdispatcher: CollectingDispatcher,",
			"\t\ttracker: Tracker,",
			"\t\tdomain: Dict[Text, Any]",
			"\t) -> List[Dict[Text, Any]]:",
			"",
			"\t\tdispatcher.utter_message($4)",
			"",
			"\t\treturn [UserUtteranceReverted()]",
			"$0"
		],
		"description": "Rasa mapping class"
	},
	"custom NLU component": {
		"scope": "python",
		"prefix": "NLU Component",
		"body": [
			"import typing",
			"from typing import Any, Optional, Text, Dict, List, Type",
			"",
			"from rasa.nlu.components import Component",
			"from rasa.nlu.config import RasaNLUModelConfig",
			"from rasa.nlu.training_data import Message, TrainingData",
			"",
			"if typing.TYPE_CHECKING:",
			"\tfrom rasa.nlu.model import Metadata",
			"",
			"",
			"class MyComponent(Component):",
			"\t\"\"\"A new component\"\"\"",
			"",
			"\t# Which components are required by this component.",
			"\t# Listed components should appear before the component itself in the pipeline.",
			"\t@classmethod",
			"\tdef required_components(cls) -> List[Type[Component]]:",
			"\t\t\"\"\"Specify which components need to be present in the pipeline.\"\"\"",
			"",
			"\t\treturn []",
			"",
			"\t# Defines the default configuration parameters of a component",
			"\t# these values can be overwritten in the pipeline configuration",
			"\t# of the model. The component should choose sensible defaults",
			"\t# and should be able to create reasonable results with the defaults.",
			"\tdefaults = {}",
			"",
			"\t# Defines what language(s) this component can handle.",
			"\t# This attribute is designed for instance method: `can_handle_language`.",
			"\t# Default value is None which means it can handle all languages.",
			"\t# This is an important feature for backwards compatibility of components.",
			"\tlanguage_list = None",
			"",
			"\tdef __init__(self, component_config: Optional[Dict[Text, Any]] = None) -> None:",
			"\t\tsuper().__init__(component_config)",
			"",
			"\tdef train(",
			"\t\tself,",
			"\t\ttraining_data: TrainingData,",
			"\t\tconfig: Optional[RasaNLUModelConfig] = None,",
			"\t\t**kwargs: Any,",
			"\t) -> None:",
			"\t\t\"\"\"Train this component.",
			"",
			"\t\tThis is the components chance to train itself provided",
			"\t\twith the training data. The component can rely on",
			"\t\tany context attribute to be present, that gets created",
			"\t\tby a call to :meth:`components.Component.pipeline_init`",
			"\t\tof ANY component and",
			"\t\ton any context attributes created by a call to",
			"\t\t:meth:`components.Component.train`",
			"\t\tof components previous to this one.\"\"\"",
			"\t\tpass",
			"",
			"\tdef process(self, message: Message, **kwargs: Any) -> None:",
			"\t\t\"\"\"Process an incoming message.",
			"",
			"\t\tThis is the components chance to process an incoming",
			"\t\tmessage. The component can rely on",
			"\t\tany context attribute to be present, that gets created",
			"\t\tby a call to :meth:`components.Component.pipeline_init`",
			"\t\tof ANY component and",
			"\t\ton any context attributes created by a call to",
			"\t\t:meth:`components.Component.process`",
			"\t\tof components previous to this one.\"\"\"",
			"\t\tpass",
			"",
			"\tdef persist(self, file_name: Text, model_dir: Text) -> Optional[Dict[Text, Any]]:",
			"\t\t\"\"\"Persist this component to disk for future loading.\"\"\"",
			"",
			"\t\tpass",
			"",
			"\t@classmethod",
			"\tdef load(",
			"\t\tcls,",
			"\t\tmeta: Dict[Text, Any],",
			"\t\tmodel_dir: Optional[Text] = None,",
			"\t\tmodel_metadata: Optional[\"Metadata\"] = None,",
			"\t\tcached_component: Optional[\"Component\"] = None,",
			"\t\t**kwargs: Any,",
			"\t) -> \"Component\":",
			"\t\t\"\"\"Load this component from file.\"\"\"",
			"",
			"\t\tif cached_component:",
			"\t\t\treturn cached_component",
			"\t\telse:",
			"\t\t\treturn cls(meta)",
			"$0"
		],
		"description": "NLU Component file"
	}
}
